import{_ as i,c as a,o as e,aA as t}from"./chunks/framework.BeM8k1A1.js";const k=JSON.parse('{"title":"Contributing","description":"","frontmatter":{},"headers":[],"relativePath":"developer/contributing.md","filePath":"developer/contributing.md","lastUpdated":null}'),n={name:"developer/contributing.md"};function l(o,s,p,r,h,d){return e(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="contributing" tabindex="-1">Contributing <a class="header-anchor" href="#contributing" aria-label="Permalink to &quot;Contributing {#contributing}&quot;">​</a></h1><p>This page details the guidelines that should be followed when contributing to CensoredDistributions.jl.</p><h2 id="Getting-Started" tabindex="-1">Getting Started <a class="header-anchor" href="#Getting-Started" aria-label="Permalink to &quot;Getting Started {#Getting-Started}&quot;">​</a></h2><p>Before contributing, please:</p><ol><li><p>Read the <a href="/CensoredDistributions.jl/previews/PR137/getting-started/julia#julia">Getting Started with Julia</a> guide if you&#39;re new to Julia development</p></li><li><p><strong>Install Task</strong> for streamlined development workflows:</p></li></ol><ul><li><p><strong>macOS</strong>: <code>brew install go-task/tap/go-task</code></p></li><li><p><strong>Linux</strong>: Download from <a href="https://github.com/go-task/task/releases" target="_blank" rel="noreferrer">releases</a> or use package manager</p></li><li><p><strong>Windows</strong>: <code>winget install Task.Task</code> or download from releases</p></li></ul><ol start="3"><li><p>Check out the <a href="/CensoredDistributions.jl/previews/PR137/developer/index#developer">developer documentation</a> for advanced workflows</p></li><li><p>Review the project structure and development commands below</p></li></ol><h2 id="Project-Structure" tabindex="-1">Project Structure <a class="header-anchor" href="#Project-Structure" aria-label="Permalink to &quot;Project Structure {#Project-Structure}&quot;">​</a></h2><p>CensoredDistributions.jl uses multiple environments for different purposes:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CensoredDistributions.jl/</span></span>
<span class="line"><span>├── Project.toml           # Main package environment</span></span>
<span class="line"><span>├── test/</span></span>
<span class="line"><span>│   ├── Project.toml       # Test environment with test dependencies</span></span>
<span class="line"><span>│   ├── runtests.jl        # Main test entry point</span></span>
<span class="line"><span>│   ├── censoring/         # Feature-specific tests</span></span>
<span class="line"><span>│   └── package/           # Quality tests (Aqua, DocTest, etc.)</span></span>
<span class="line"><span>├── docs/</span></span>
<span class="line"><span>│   ├── Project.toml       # Documentation environment</span></span>
<span class="line"><span>│   ├── make.jl           # Documentation build script</span></span>
<span class="line"><span>│   ├── pages.jl          # Documentation structure</span></span>
<span class="line"><span>│   └── src/              # Documentation source files</span></span>
<span class="line"><span>└── benchmark/</span></span>
<span class="line"><span>    ├── Project.toml       # Benchmark environment</span></span>
<span class="line"><span>    └── runbenchmarks.jl   # Benchmark suite</span></span></code></pre></div><h2 id="Development-Commands" tabindex="-1">Development Commands <a class="header-anchor" href="#Development-Commands" aria-label="Permalink to &quot;Development Commands {#Development-Commands}&quot;">​</a></h2><p>This project includes a Taskfile for streamlined development workflows.</p><h3 id="Quick-Start-with-Tasks" tabindex="-1">Quick Start with Tasks <a class="header-anchor" href="#Quick-Start-with-Tasks" aria-label="Permalink to &quot;Quick Start with Tasks {#Quick-Start-with-Tasks}&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Discover all available tasks</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Common development workflow</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> setup</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # One-time environment setup</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # Fast tests + documentation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> precommit</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Pre-commit validation</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Individual workflows</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test-fast</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Quick testing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs-pluto</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # Start Pluto notebook server</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> benchmark</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Run benchmarks</span></span></code></pre></div><h3 id="Detailed-Commands" tabindex="-1">Detailed Commands <a class="header-anchor" href="#Detailed-Commands" aria-label="Permalink to &quot;Detailed Commands {#Detailed-Commands}&quot;">​</a></h3><p>For advanced usage or when tasks don&#39;t cover specific needs, use the underlying Julia commands:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Full test suite (recommended for CI and final checks)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">julia</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --project=.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;using Pkg; Pkg.test()&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run tests directly (faster during development)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">julia</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --project=test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test/runtests.jl</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skip quality tests for faster development iteration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">julia</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --project=test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test/runtests.jl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> skip_quality</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build complete documentation (includes Pluto notebook conversion)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">julia</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --project=docs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs/make.jl</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Execute benchmark suite</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">julia</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --project=benchmark</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> benchmark/runbenchmarks.jl</span></span></code></pre></div><h2 id="Testing-Strategy" tabindex="-1">Testing Strategy <a class="header-anchor" href="#Testing-Strategy" aria-label="Permalink to &quot;Testing Strategy {#Testing-Strategy}&quot;">​</a></h2><h3 id="Test-Organisation" tabindex="-1">Test Organisation <a class="header-anchor" href="#Test-Organisation" aria-label="Permalink to &quot;Test Organisation {#Test-Organisation}&quot;">​</a></h3><ul><li><p><strong>Unit tests</strong>: Located in <code>test/censoring/</code> for each distribution type</p></li><li><p><strong>Integration tests</strong>: Test interactions between components</p></li><li><p><strong>Quality tests</strong>: Located in <code>test/package/</code> including:</p><ul><li><p>Aqua.jl for code quality</p></li><li><p>DocTest.jl for documentation examples</p></li><li><p>Code formatting and linting checks</p></li></ul></li></ul><h3 id="Test-Environment" tabindex="-1">Test Environment <a class="header-anchor" href="#Test-Environment" aria-label="Permalink to &quot;Test Environment {#Test-Environment}&quot;">​</a></h3><p>The test environment (<code>test/Project.toml</code>) includes:</p><ul><li><p>Test-specific dependencies (TestItemRunner.jl, Test.jl)</p></li><li><p>The main package in development mode</p></li><li><p>Quality assurance tools</p></li></ul><p>Use <code>skip_quality</code> argument during development to bypass slow quality checks:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">julia</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --project=test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test/runtests.jl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> skip_quality</span></span></code></pre></div><h2 id="Documentation" tabindex="-1">Documentation <a class="header-anchor" href="#Documentation" aria-label="Permalink to &quot;Documentation {#Documentation}&quot;">​</a></h2><h3 id="Pluto-Notebooks" tabindex="-1">Pluto Notebooks <a class="header-anchor" href="#Pluto-Notebooks" aria-label="Permalink to &quot;Pluto Notebooks {#Pluto-Notebooks}&quot;">​</a></h3><p>The tutorials use <a href="https://plutojl.org/" target="_blank" rel="noreferrer">Pluto.jl</a> notebooks located in <code>docs/src/getting-started/tutorials/</code>. These are converted to markdown during the documentation build.</p><h4 id="Working-with-Pluto-notebooks" tabindex="-1">Working with Pluto notebooks <a class="header-anchor" href="#Working-with-Pluto-notebooks" aria-label="Permalink to &quot;Working with Pluto notebooks {#Working-with-Pluto-notebooks}&quot;">​</a></h4><ol><li><strong>Start Pluto</strong>: Use the task command:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs-pluto</span></span></code></pre></div><ol start="2"><li><strong>Environment setup</strong>: Notebooks should use the docs environment and develop the local package:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># In notebook setup cell</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    docs_dir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">∘</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">∘</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dirname)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@__DIR__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pkg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pkg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Pkg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(docs_dir)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Pkg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">develop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PackageSpec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(docs_dir)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Pkg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><ol start="3"><li><strong>Adding new notebooks</strong>:</li></ol><ul><li><p>Add the notebook file to <code>docs/src/getting-started/tutorials/</code></p></li><li><p>Add build call in <code>docs/make.jl</code></p></li><li><p>Add the generated <code>.md</code> file to <code>docs/pages.jl</code></p></li></ul><h3 id="Documentation-Structure" tabindex="-1">Documentation Structure <a class="header-anchor" href="#Documentation-Structure" aria-label="Permalink to &quot;Documentation Structure {#Documentation-Structure}&quot;">​</a></h3><ul><li><p><code>docs/src/getting-started/</code>: User-facing documentation</p></li><li><p><code>docs/src/lib/</code>: API documentation (auto-generated)</p></li><li><p><code>docs/src/developer/</code>: Developer and contributor documentation</p></li></ul><h2 id="Branches-and-Workflow" tabindex="-1">Branches and Workflow <a class="header-anchor" href="#Branches-and-Workflow" aria-label="Permalink to &quot;Branches and Workflow {#Branches-and-Workflow}&quot;">​</a></h2><ul><li><p><strong>Feature branches</strong>: Create feature branches for new development</p></li><li><p><strong>Main branch</strong>: Features are merged into <code>main</code> when ready</p></li><li><p><strong>Releases</strong>: Automatic releases are created when versions are tagged</p></li></ul><h2 id="Style-Guide" tabindex="-1">Style Guide <a class="header-anchor" href="#Style-Guide" aria-label="Permalink to &quot;Style Guide {#Style-Guide}&quot;">​</a></h2><p>This project follows the <a href="https://github.com/SciML/SciMLStyle" target="_blank" rel="noreferrer">SciML style guide</a>.</p><p>Key points:</p><ul><li><p>Use descriptive variable names</p></li><li><p>Follow Julia naming conventions (snake_case for variables, CamelCase for types)</p></li><li><p>Write docstrings for exported functions</p></li><li><p>Keep lines under 80 characters where possible</p></li><li><p>Use consistent indentation (4 spaces)</p></li></ul><h3 id="Documentation-Standards" tabindex="-1">Documentation Standards <a class="header-anchor" href="#Documentation-Standards" aria-label="Permalink to &quot;Documentation Standards {#Documentation-Standards}&quot;">​</a></h3><p>All docstrings use the DocStringExtensions.jl template system defined in <code>src/docstrings.jl</code>:</p><p><strong>Functions</strong>: Use <code>$(TYPEDSIGNATURES)</code> for automatic signature generation:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@doc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(TYPEDSIGNATURES)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Brief description of the function.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"># Arguments</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">- \`param1\`: Description (no type annotations needed)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">- \`param2\`: Description</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"># Keyword Arguments</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">- \`kwarg1\`: Description</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(param1, param2; kwarg1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">default)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # implementation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p><strong>Structs</strong>: Use <code>$(TYPEDEF)</code> and <code>$(TYPEDFIELDS)</code> with inline field documentation:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@doc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(TYPEDEF)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Description of the struct.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(TYPEDFIELDS)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyStruct</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Description of field1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    field1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Description of field2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    field2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p><strong>Key rules</strong>:</p><ul><li><p><strong>Never use <code>@doc raw&quot;</code></strong> - it bypasses the template system</p></li><li><p><strong>Don&#39;t repeat type information</strong> in argument descriptions since <code>$(TYPEDSIGNATURES)</code> shows them</p></li><li><p><strong>Use <code>@doc &quot;</code> (not <code>@doc &quot;&quot;&quot;</code>)</strong> to allow macro expansion</p></li><li><p><strong>Document argument purpose</strong>, not types</p></li></ul><h2 id="Code-Quality" tabindex="-1">Code Quality <a class="header-anchor" href="#Code-Quality" aria-label="Permalink to &quot;Code Quality {#Code-Quality}&quot;">​</a></h2><h3 id="Pre-commit-Checklist" tabindex="-1">Pre-commit Checklist <a class="header-anchor" href="#Pre-commit-Checklist" aria-label="Permalink to &quot;Pre-commit Checklist {#Pre-commit-Checklist}&quot;">​</a></h3><p>Before submitting a pull request:</p><ol><li><strong>Run pre-commit checks</strong> (recommended):</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> precommit</span></span></code></pre></div><ol start="2"><li><strong>Or run individual checks</strong>:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # Full test suite</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs-fast</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Build documentation</span></span></code></pre></div><h3 id="Quality-Tools" tabindex="-1">Quality Tools <a class="header-anchor" href="#Quality-Tools" aria-label="Permalink to &quot;Quality Tools {#Quality-Tools}&quot;">​</a></h3><p>The project includes several quality assurance tools:</p><ul><li><p><strong>Aqua.jl</strong>: Checks for common package issues</p></li><li><p><strong>JET.jl</strong>: Static analysis for type stability (available in developer environment)</p></li><li><p><strong>DocTest.jl</strong>: Ensures documentation examples work</p></li></ul><h2 id="Adding-New-Features" tabindex="-1">Adding New Features <a class="header-anchor" href="#Adding-New-Features" aria-label="Permalink to &quot;Adding New Features {#Adding-New-Features}&quot;">​</a></h2><ol><li><p><strong>Write tests first</strong>: Add tests in appropriate <code>test/</code> subdirectory</p></li><li><p><strong>Implement feature</strong>: Add implementation in <code>src/</code></p></li><li><p><strong>Document feature</strong>: Add docstrings and update documentation if needed</p></li><li><p><strong>Test thoroughly</strong>: Run full test suite</p></li><li><p><strong>Update changelog</strong>: Add entry describing the change</p></li></ol><h2 id="Advanced-Development-Resources" tabindex="-1">Advanced Development Resources <a class="header-anchor" href="#Advanced-Development-Resources" aria-label="Permalink to &quot;Advanced Development Resources {#Advanced-Development-Resources}&quot;">​</a></h2><p>For advanced Julia development techniques beyond this project:</p><ul><li><p><strong><a href="https://docs.julialang.org/en/v1/manual/performance-tips/" target="_blank" rel="noreferrer">Julia Performance Tips</a></strong>: Official performance optimization guide</p></li><li><p><strong><a href="https://github.com/aviatesk/JET.jl" target="_blank" rel="noreferrer">JET.jl</a></strong>: Static analysis for type stability and optimization</p></li><li><p><strong><a href="https://github.com/timholy/ProfileView.jl" target="_blank" rel="noreferrer">ProfileView.jl</a></strong>: Visual profiling for performance analysis</p></li><li><p><strong><a href="https://github.com/JuliaCI/PkgTemplates.jl" target="_blank" rel="noreferrer">PkgTemplates.jl</a></strong>: Best practices for Julia package structure</p></li></ul><h2 id="Getting-Help" tabindex="-1">Getting Help <a class="header-anchor" href="#Getting-Help" aria-label="Permalink to &quot;Getting Help {#Getting-Help}&quot;">​</a></h2><ul><li><p><strong>Questions</strong>: Open a GitHub discussion</p></li><li><p><strong>Bugs</strong>: File a GitHub issue with minimal reproducible example</p></li><li><p><strong>Feature requests</strong>: Open a GitHub issue with rationale and use case</p></li><li><p><strong>General Julia help</strong>: See <a href="https://discourse.julialang.org/" target="_blank" rel="noreferrer">Julia Discourse</a> or <a href="https://julialang.org/slack/" target="_blank" rel="noreferrer">Julia Slack</a></p></li></ul><p>Thank you for contributing to CensoredDistributions.jl!</p>`,69)])])}const u=i(n,[["render",l]]);export{k as __pageData,u as default};
