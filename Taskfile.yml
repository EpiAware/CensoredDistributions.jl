version: '3'

tasks:
  # Default task - show help
  default:
    desc: Show available tasks and common workflows
    cmds:
      - task: help

  # === TESTING WORKFLOWS ===
  test:
    desc: Run comprehensive test suite including quality checks
    cmds:
      - echo "🧪 Running comprehensive test suite..."
      - julia --project=. --quiet -e 'using Pkg; Pkg.test()'
      - echo "✅ All tests completed successfully"

  test-fast:
    desc: Run tests quickly (skip quality checks for development)
    cmds:
      - echo "🧪 Running fast test suite (skipping quality checks)..."
      - julia --project=. --quiet -e 'using Pkg; Pkg.test(test_args=["skip_quality"])'
      - echo "✅ Fast tests completed"

  test-quality:
    desc: Run only quality checks (Aqua, formatting, linting, doctests)
    cmds:
      - echo "🔍 Running quality checks only..."
      - julia --project=. --quiet -e 'using Pkg; Pkg.test(test_args=["quality_only"])'
      - echo "✅ Quality checks completed"

  test-extensions:
    desc: Test package extensions with OptimizationExt
    cmds:
      - echo "🔧 Testing package extensions..."
      - julia --project=docs --quiet -e 'using CensoredDistributions, Distributions, OptimizationOptimJL, Bijectors; println("✅ Extensions loaded successfully")'

  format:
    desc: Format code with JuliaFormatter (fixes formatting issues)
    cmds:
      - echo "🎨 Formatting code with JuliaFormatter..."
      - julia --project=test --quiet -e 'using JuliaFormatter; format(".", verbose=false, overwrite=true)'
      - echo "✅ Code formatting completed"

  format-check:
    desc: Check code formatting without making changes
    cmds:
      - echo "🔍 Checking code formatting..."
      - |
        julia --project=test --quiet -e 'using JuliaFormatter; success = format(".", verbose=false, overwrite=false); success || error("Code needs formatting - run: task format")'
      - echo "✅ Code formatting is correct"

  coverage:
    desc: Run tests with coverage and generate coverage report
    cmds:
      - echo "📊 Running tests with coverage..."
      - julia --project=. --code-coverage=user -e 'using Pkg; Pkg.test(test_args=["skip_quality"])'
      - echo "📊 Processing coverage data..."
      - julia --project=test -e 'using Pkg; Pkg.add("Coverage"); using Coverage; coverage = process_folder(); LCOV.writefile("lcov.info", coverage)'
      - echo "✅ Coverage report generated (lcov.info)"

  # === IMPORT MANAGEMENT ===
  imports-check:
    desc: Check for implicit and unused imports using ExplicitImports.jl
    cmds:
      - echo "🔍 Analyzing import usage with ExplicitImports.jl..."
      - julia --project=test --quiet -e 'using ExplicitImports, CensoredDistributions; check_no_implicit_imports(CensoredDistributions); check_no_stale_explicit_imports(CensoredDistributions); println("✅ Import analysis completed")'

  imports-report:
    desc: Generate detailed import analysis report
    cmds:
      - echo "📋 Generating comprehensive import analysis report..."
      - |
        julia --project=test --quiet -e '
        using ExplicitImports, CensoredDistributions

        println("=== EXPLICIT IMPORTS ANALYSIS REPORT ===")
        println()

        unused = collect(check_all_unused_imports(CensoredDistributions))
        if !isempty(unused)
            println("⚠️  Unused imports:")
            for imp in unused
                println("   ", imp)
            end
            println()
        else
            println("✅ No unused imports found")
            println()
        end

        implicit = collect(check_all_implicit_imports(CensoredDistributions))
        if !isempty(implicit)
            println("⚠️  Implicit imports:")
            for imp in implicit
                println("   ", imp)
            end
            println()
        else
            println("✅ No implicit imports found")
            println()
        end

        println("✅ Import analysis completed")
        '

  api-public:
    desc: List all public but non-exported functions
    cmds:
      - echo "📋 Public API symbols (non-exported)..."
      - |
        julia --project=. --quiet -e '
        using CensoredDistributions

        public_symbols = [
            :PrimaryCensored, :IntervalCensored, :Weighted,
            :AbstractSolverMethod, :AnalyticalSolver, :NumericSolver,
            :primarycensored_logcdf, :floor_to_interval, :find_interval_index,
            :find_interval_boundary, :get_interval_bounds, :_log_normalisation_constant,
            :_quantile_optimization
        ]

        println("=== PUBLIC API SYMBOLS (NON-EXPORTED) ===")
        for symbol in public_symbols
            if isdefined(CensoredDistributions, symbol)
                println("✓ ", symbol)
            else
                println("✗ ", symbol, " (not defined)")
            end
        end
        '

  api-docs:
    desc: Check documentation coverage of public API symbols
    cmds:
      - echo "📚 Checking documentation coverage of public API..."
      - julia --project=. --quiet -e 'using Pkg; Pkg.test(test_args=["quality_only"]); println("✅ Documentation coverage check completed")'

  # === DOCUMENTATION WORKFLOWS ===
  docs:
    desc: Build complete documentation including Pluto notebooks (slow)
    cmds:
      - echo "📚 Building complete documentation (including notebooks)..."
      - julia --project=docs docs/make.jl
      - echo "✅ Documentation built successfully"

  docs-fast:
    desc: Build documentation quickly (skip notebook processing)
    cmds:
      - echo "📚 Building documentation (skipping notebooks)..."
      - julia --project=docs docs/make.jl --skip-notebooks
      - echo "✅ Fast documentation build completed"

  docs-pluto:
    desc: Start Pluto server for interactive notebook development
    cmds:
      - echo "🚀 Starting Pluto server for interactive development..."
      - julia --project=docs -e 'using Pluto; Pluto.run()'

  # === DEVELOPMENT SETUP ===
  setup:
    desc: Set up development environment from scratch
    cmds:
      - echo "🛠️  Setting up development environment..."
      - echo "📦 Installing root environment dependencies..."
      - julia --project=. -e 'using Pkg; Pkg.instantiate()'
      - echo "📦 Installing test environment dependencies..."
      - julia --project=test -e 'using Pkg; Pkg.instantiate()'
      - echo "📦 Installing docs environment dependencies..."
      - julia --project=docs -e 'using Pkg; Pkg.instantiate()'
      - echo "📦 Installing benchmark environment dependencies..."
      - julia --project=benchmark -e 'using Pkg; Pkg.instantiate()'
      - echo "✅ Development environment ready"

  setup-precompile:
    desc: Force precompilation of all environments
    cmds:
      - echo "🔄 Precompiling all environments..."
      - julia --project=. -e 'using Pkg; Pkg.precompile()'
      - julia --project=test -e 'using Pkg; Pkg.precompile()'
      - julia --project=docs -e 'using Pkg; Pkg.precompile()'
      - julia --project=benchmark -e 'using Pkg; Pkg.precompile()'
      - echo "✅ Precompilation completed"

  # === PACKAGE MANAGEMENT ===
  pkg-status:
    desc: Show package status across all environments
    cmds:
      - echo "📦 Package status overview:"
      - echo ""
      - echo "=== Root Environment ==="
      - julia --project=. --quiet -e 'using Pkg; Pkg.status()'
      - echo ""
      - echo "=== Test Environment ==="
      - julia --project=test --quiet -e 'using Pkg; Pkg.status()'
      - echo ""
      - echo "=== Docs Environment ==="
      - julia --project=docs --quiet -e 'using Pkg; Pkg.status()'
      - echo ""
      - echo "=== Benchmark Environment ==="
      - julia --project=benchmark --quiet -e 'using Pkg; Pkg.status()'

  pkg-update:
    desc: Update packages in all environments
    interactive: true
    cmds:
      - |
        echo "⚠️  WARNING: This will update packages in all environments"
        printf "   Continue? [y/N] "
        read -r REPLY
        if [ "$REPLY" = "y" ] || [ "$REPLY" = "Y" ]; then
          echo "📦 Updating root environment..."
          julia --project=. -e 'using Pkg; Pkg.update()'
          echo "📦 Updating test environment..."
          julia --project=test -e 'using Pkg; Pkg.update()'
          echo "📦 Updating docs environment..."
          julia --project=docs -e 'using Pkg; Pkg.update()'
          echo "📦 Updating benchmark environment..."
          julia --project=benchmark -e 'using Pkg; Pkg.update()'
          echo "✅ All environments updated"
        else
          echo "❌ Update cancelled"
        fi

  pkg-add:
    desc: "Add package to specified environment (usage: task pkg:add ENV=docs -- PackageName)"
    cmds:
      - |
        ENV_VAR={{.ENV | default "."}}
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "Usage: task pkg:add ENV=<environment> -- <PackageName>"
          echo "Environments: . (root), test, docs, benchmark"
          echo "Example: task pkg:add ENV=docs -- PlutoStaticHTML"
          exit 1
        fi
        echo "📦 Adding {{.CLI_ARGS}} to $ENV_VAR environment..."
        julia --project=$ENV_VAR -e "using Pkg; Pkg.add(\"{{.CLI_ARGS}}\")"
        echo "✅ Package added successfully"

  # === BENCHMARKS ===
  benchmark:
    desc: Run complete benchmark suite
    cmds:
      - echo "⚡ Running benchmark suite..."
      - julia --project=benchmark benchmark/runbenchmarks.jl
      - echo "✅ Benchmarks completed successfully"

  # === DEVELOPMENT WORKFLOWS ===
  dev:
    desc: Common development workflow (format + precommit + fast test + fast docs)
    cmds:
      - task: format
      - task: precommit
      - task: test-fast
      - task: docs-fast
      - echo "✅ Development checks completed"

  dev-full:
    desc: Full development workflow (format + precommit + all tests + full docs)
    cmds:
      - task: format
      - task: precommit
      - task: test
      - task: docs
      - echo "✅ Full development checks completed"

  precommit:
    desc: Run pre-commit formatting hooks only
    cmds:
      - echo "🎨 Running pre-commit formatting hooks..."
      - pre-commit run --all-files
      - echo "✅ Pre-commit formatting completed"

  ci:
    desc: Simulate CI pipeline locally (comprehensive testing)
    cmds:
      - echo "🤖 Running CI simulation..."
      - task: precommit
      - task: test
      - task: docs-fast
      - task: benchmark
      - echo "✅ CI simulation completed successfully"

  # === UTILITIES ===
  utils-uuid:
    desc: Generate UUID for Pluto notebooks
    cmds:
      - julia -e "using UUIDs; println(uuid4())"

  clean:
    desc: Clean build artifacts and temporary files
    interactive: true
    cmds:
      - |
        echo "⚠️  WARNING: This will delete build artifacts and temporary files"
        echo "   - docs/build/ directory"
        echo "   - .cov files"
        echo "   - Test environment Manifest.toml"
        printf "   Continue? [y/N] "
        read -r REPLY
        if [ "$REPLY" = "y" ] || [ "$REPLY" = "Y" ]; then
          echo "🗑️  Cleaning build artifacts..."
          rm -rf docs/build/
          find . -name "*.cov" -delete
          rm -f test/Manifest.toml docs/Manifest.toml benchmark/Manifest.toml
          echo "✅ Cleanup completed"
        else
          echo "❌ Cleanup cancelled"
        fi

  # === INFORMATION ===
  info:
    desc: Show project information and environment status
    cmds:
      - echo "📋 CensoredDistributions.jl Project Information"
      - echo "==============================================="
      - |
        julia --project=. -e 'using Pkg; println("Julia version: ", VERSION); pkg = Pkg.project(); println("Package: ", pkg.name, " v", pkg.version)'
      - echo ""
      - task: pkg-status

  help:
    desc: Show available commands
    cmds:
      - task --list
