import{_ as a,c as i,o as s,aA as t}from"./chunks/framework.BeM8k1A1.js";const h=JSON.parse('{"title":"Release Process","description":"","frontmatter":{},"headers":[],"relativePath":"developer/release-process.md","filePath":"developer/release-process.md","lastUpdated":null}'),l={name:"developer/release-process.md"};function o(n,e,r,p,c,d){return s(),i("div",null,[...e[0]||(e[0]=[t(`<h1 id="release-process" tabindex="-1">Release Process <a class="header-anchor" href="#release-process" aria-label="Permalink to &quot;Release Process {#release-process}&quot;">​</a></h1><p>CensoredDistributions.jl follows a hybrid approach to release documentation, combining the Julia ecosystem&#39;s standard practices with a news file for major releases.</p><h2 id="Release-Philosophy" tabindex="-1">Release Philosophy <a class="header-anchor" href="#Release-Philosophy" aria-label="Permalink to &quot;Release Philosophy {#Release-Philosophy}&quot;">​</a></h2><ul><li><p><strong>Release frequently</strong>: Ideally after every merged PR to main.</p></li><li><p><strong>Semantic versioning</strong>: Follow <a href="https://semver.org/" target="_blank" rel="noreferrer">SemVer</a> strictly</p></li><li><p><strong>Hybrid changelog approach</strong>: Use NEWS.md for major releases, GitHub releases for all releases</p></li><li><p><strong>Automated tooling</strong>: Leverage standard Julia ecosystem tools</p></li><li><p><strong>SciML ecosystem alignment</strong>: Follow established patterns from the broader scientific computing ecosystem</p></li></ul><p><strong>When NOT to release</strong>:</p><ul><li><p>Work-in-progress features</p></li><li><p>Failing tests</p></li><li><p>Incomplete documentation for new features</p></li><li><p>During Julia ecosystem-wide changes (wait for stability)</p></li></ul><h2 id="Release-Workflow" tabindex="-1">Release Workflow <a class="header-anchor" href="#Release-Workflow" aria-label="Permalink to &quot;Release Workflow {#Release-Workflow}&quot;">​</a></h2><h3 id="1.-Standard-Julia-Tooling" tabindex="-1">1. Standard Julia Tooling <a class="header-anchor" href="#1.-Standard-Julia-Tooling" aria-label="Permalink to &quot;1. Standard Julia Tooling {#1.-Standard-Julia-Tooling}&quot;">​</a></h3><p>We use the same tools as major Julia packages:</p><ul><li><p><strong>CompatHelper</strong>: Automated dependency updates via daily PRs</p></li><li><p><strong>@JuliaRegistrator</strong>: Manual package registration to Julia General Registry</p></li><li><p><strong>TagBot</strong>: Automated GitHub release creation after registry registration</p></li></ul><h3 id="2.-Release-Steps" tabindex="-1">2. Release Steps <a class="header-anchor" href="#2.-Release-Steps" aria-label="Permalink to &quot;2. Release Steps {#2.-Release-Steps}&quot;">​</a></h3><h4 id="For-Regular-Releases-Patch/Minor" tabindex="-1">For Regular Releases (Patch/Minor) <a class="header-anchor" href="#For-Regular-Releases-Patch/Minor" aria-label="Permalink to &quot;For Regular Releases (Patch/Minor) {#For-Regular-Releases-Patch/Minor}&quot;">​</a></h4><ol><li><p><strong>Ensure all tests pass</strong> and pre-commit hooks are clean</p></li><li><p><strong>Update version</strong> in <code>Project.toml</code>:</p></li></ol><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.2.3&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Follow semantic versioning</span></span></code></pre></div><ol start="3"><li><p><strong>Commit and merge</strong> to main via PR</p></li><li><p><strong>Trigger registration</strong> by commenting on the merge commit:</p></li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@JuliaRegistrator register</span></span></code></pre></div><ol start="5"><li><strong>Automated flow</strong>:</li></ol><ul><li><p>JuliaRegistrator creates PR to Julia General Registry</p></li><li><p>Once merged (~15 minutes), TagBot automatically creates GitHub release</p></li><li><p>Documentation is automatically deployed for new tagged versions</p></li></ul><h4 id="For-Major-Releases-Breaking-Changes" tabindex="-1">For Major Releases (Breaking Changes) <a class="header-anchor" href="#For-Major-Releases-Breaking-Changes" aria-label="Permalink to &quot;For Major Releases (Breaking Changes) {#For-Major-Releases-Breaking-Changes}&quot;">​</a></h4><ol><li><p><strong>Plan breaking changes</strong> carefully with issue discussion</p></li><li><p><strong>Create NEWS.md entry</strong> following the template above:</p></li></ol><ul><li><p>Document all breaking changes with before/after examples</p></li><li><p>Provide comprehensive migration guidance</p></li><li><p>Include rationale for major changes</p></li><li><p>Acknowledge significant contributors</p></li></ul><ol start="3"><li><p><strong>Update version</strong> with major version bump (e.g., <code>1.5.2</code> → <code>2.0.0</code>)</p></li><li><p><strong>Follow same registration process</strong> as regular releases</p></li><li><p><strong>Consider deprecation warnings</strong> in the previous minor release</p></li></ol><p><strong>Additional Major Release Considerations</strong>:</p><ul><li><p>Create migration documentation or guides if needed</p></li><li><p>Update tutorials and examples to reflect new API</p></li><li><p>Coordinate with downstream packages that depend on CensoredDistributions.jl</p></li><li><p>Consider advance communication to user community via Julia Discourse or GitHub Discussions</p></li></ul><h3 id="3.-Semantic-Versioning-Guidelines" tabindex="-1">3. Semantic Versioning Guidelines <a class="header-anchor" href="#3.-Semantic-Versioning-Guidelines" aria-label="Permalink to &quot;3. Semantic Versioning Guidelines {#3.-Semantic-Versioning-Guidelines}&quot;">​</a></h3><p>Following <a href="https://semver.org/" target="_blank" rel="noreferrer">SemVer</a>:</p><ul><li><p><strong>Patch</strong> (<code>1.0.0</code> → <code>1.0.1</code>): Bug fixes, performance improvements</p></li><li><p><strong>Minor</strong> (<code>1.0.1</code> → <code>1.1.0</code>): New features, additions to API (backwards compatible)</p></li><li><p><strong>Major</strong> (<code>1.1.0</code> → <code>2.0.0</code>): Breaking changes to public API</p></li></ul><h4 id="Examples:" tabindex="-1">Examples: <a class="header-anchor" href="#Examples:" aria-label="Permalink to &quot;Examples: {#Examples:}&quot;">​</a></h4><ul><li><p>Adding new distribution types: <strong>Minor</strong></p></li><li><p>Fixing calculation bugs: <strong>Patch</strong></p></li><li><p>Changing function signatures: <strong>Major</strong></p></li><li><p>Adding optional parameters: <strong>Minor</strong></p></li><li><p>Removing deprecated functions: <strong>Major</strong></p></li></ul><h3 id="4.-Release-Notes-and-Changelog-Strategy" tabindex="-1">4. Release Notes and Changelog Strategy <a class="header-anchor" href="#4.-Release-Notes-and-Changelog-Strategy" aria-label="Permalink to &quot;4. Release Notes and Changelog Strategy {#4.-Release-Notes-and-Changelog-Strategy}&quot;">​</a></h3><p>We use a <strong>hybrid changelog approach</strong> that combines the strengths of both traditional NEWS.md files and GitHub releases:</p><h4 id="Changelog-Hierarchy" tabindex="-1">Changelog Hierarchy <a class="header-anchor" href="#Changelog-Hierarchy" aria-label="Permalink to &quot;Changelog Hierarchy {#Changelog-Hierarchy}&quot;">​</a></h4><ol><li><strong>GitHub Releases</strong>: Used for all releases (patch, minor, and major)</li></ol><ul><li><p>Automatically generated by TagBo</p></li><li><p>Provides immediate visibility in the Julia ecosystem</p></li><li><p>Links to commits and PRs for detailed change tracking</p></li></ul><ol start="2"><li><strong>NEWS.md</strong>: Used for major releases and significant milestones</li></ol><ul><li><p>Provides comprehensive context for breaking changes</p></li><li><p>Offers detailed migration guidance</p></li><li><p>Follows SciML ecosystem conventions for major version documentation</p></li></ul><h4 id="Templates" tabindex="-1">Templates <a class="header-anchor" href="#Templates" aria-label="Permalink to &quot;Templates {#Templates}&quot;">​</a></h4><h5 id="Release-Documentation-Strategy" tabindex="-1">Release Documentation Strategy <a class="header-anchor" href="#Release-Documentation-Strategy" aria-label="Permalink to &quot;Release Documentation Strategy {#Release-Documentation-Strategy}&quot;">​</a></h5><p><strong>GitHub Releases (Minor/Patch - Automated)</strong>:</p><ul><li><p>GitHub automatically generates release notes for minor and patch releases</p></li><li><p>Uses commit messages and PR labels to categorise changes</p></li><li><p>No manual intervention required</p></li></ul><p><strong>NEWS.md Entries (Major Releases - Manual)</strong>:</p><ul><li><p>Maintainers manually write detailed entries for major releases</p></li><li><p>Focus on breaking changes, migration guidance, and significant features</p></li><li><p>Provide context</p></li><li><p>Follow a structured format with breaking changes, new features, and migration examples</p></li></ul><h5 id="NEWS.md-Entry-Template-Major-Releases:" tabindex="-1">NEWS.md Entry Template (Major Releases): <a class="header-anchor" href="#NEWS.md-Entry-Template-Major-Releases:" aria-label="Permalink to &quot;NEWS.md Entry Template (Major Releases): {#NEWS.md-Entry-Template-Major-Releases:}&quot;">​</a></h5><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># CensoredDistributions.jl v2.0.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## Breaking Changes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">### API Restructuring</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">The distribution constructor API has been simplified and standardised:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;">**Before (v1.x)**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><p>julia d = PrimaryCensored(delay_dist, primary_dist, censoring_window)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>**After (v2.0)**:</span></span></code></pre></div><p>julia d = primary_censored(delay_dist, primary_dist; window=censoring_window)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>## New Features</span></span>
<span class="line"><span>- Unified distribution constructor interface</span></span>
<span class="line"><span>- Enhanced integration with Turing.jl v0.30+</span></span>
<span class="line"><span>- Support for arbitrary primary event distributions</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## Performance Improvements</span></span>
<span class="line"><span>- 3x faster PDF calculations for common distribution pairs</span></span>
<span class="line"><span>- Reduced memory allocation in vectorised operations</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## Acknowledgements</span></span>
<span class="line"><span>Special thanks to @contributor1, @contributor2 for major contributions to this</span></span>
<span class="line"><span>release.</span></span></code></pre></div><h3 id="5.-Automation-Details" tabindex="-1">5. Automation Details <a class="header-anchor" href="#5.-Automation-Details" aria-label="Permalink to &quot;5. Automation Details {#5.-Automation-Details}&quot;">​</a></h3><h4 id="CompatHelper" tabindex="-1">CompatHelper <a class="header-anchor" href="#CompatHelper" aria-label="Permalink to &quot;CompatHelper {#CompatHelper}&quot;">​</a></h4><ul><li><p>Runs daily via GitHub Actions (<code>CompatHelper.yaml</code>)</p></li><li><p>Automatically updates <code>[compat]</code> entries in <code>Project.toml</code></p></li><li><p>Creates PRs for dependency version bumps</p></li><li><p>Helps maintain up-to-date dependencies across Julia ecosystem</p></li></ul><h4 id="TagBot" tabindex="-1">TagBot <a class="header-anchor" href="#TagBot" aria-label="Permalink to &quot;TagBot {#TagBot}&quot;">​</a></h4><ul><li><p>Triggered when package appears in Julia General Registry</p></li><li><p>Automatically creates GitHub releases with generated changelog</p></li><li><p>Uses SSH key (<code>DOCUMENTER_KEY</code>) for authenticated operations</p></li><li><p>Supports custom release notes if provided</p></li></ul><h4 id="Version-Management-Actions" tabindex="-1">Version Management Actions <a class="header-anchor" href="#Version-Management-Actions" aria-label="Permalink to &quot;Version Management Actions {#Version-Management-Actions}&quot;">​</a></h4><ul><li><p>Runs automatically on pushes to main checking for version changes in Project.toml</p></li><li><p>Accepts /version major|minor|patch comments on PRs from users with write permissions</p></li><li><p>Creates patch increment PRs for main branch or commits directly to PR branches</p></li></ul><h4 id="JuliaRegistrator" tabindex="-1">JuliaRegistrator <a class="header-anchor" href="#JuliaRegistrator" aria-label="Permalink to &quot;JuliaRegistrator {#JuliaRegistrator}&quot;">​</a></h4><ul><li><p>Community bot for registering packages</p></li><li><p>Only package collaborators can trigger registration</p></li><li><p>Validates package before creating registry PR</p></li><li><p>Usually completes registration within 15 minutes</p></li></ul><h3 id="7.-Pre-Release-Checklis" tabindex="-1">7. Pre-Release Checklis <a class="header-anchor" href="#7.-Pre-Release-Checklis" aria-label="Permalink to &quot;7. Pre-Release Checklis {#7.-Pre-Release-Checklis}&quot;">​</a></h3><p>Before triggering <code>@JuliaRegistrator register</code>:</p><p><strong>For All Releases</strong>:</p><ul><li><p>[ ] All CI tests pass (including pre-commit hooks)</p></li><li><p>[ ] Version number follows semantic versioning</p></li><li><p>[ ] New features have tests and documentation</p></li><li><p>[ ] Dependencies are up to date (check CompatHelper PRs)</p></li><li><p>[ ] Examples in docstrings work correctly</p></li></ul><p><strong>Additional Checklist for Major Releases</strong>:</p><ul><li><p>[ ] NEWS.md entry created following template</p></li><li><p>[ ] Breaking changes documented with migration examples</p></li><li><p>[ ] Deprecation warnings added in previous releases (where applicable)</p></li><li><p>[ ] Migration guide or documentation updated</p></li><li><p>[ ] Downstream package compatibility assessed</p></li><li><p>[ ] Community communication planned (if needed)</p></li></ul><h3 id="8.-Emergency-Releases" tabindex="-1">8. Emergency Releases <a class="header-anchor" href="#8.-Emergency-Releases" aria-label="Permalink to &quot;8. Emergency Releases {#8.-Emergency-Releases}&quot;">​</a></h3><p>For critical bug fixes:</p><ol><li><p><strong>Create hotfix branch</strong> from latest release tag</p></li><li><p><strong>Apply minimal fix</strong> with tests</p></li><li><p><strong>Bump patch version</strong> immediately</p></li><li><p><strong>Fast-track PR review</strong> and merge</p></li><li><p><strong>Register immediately</strong> with <code>@JuliaRegistrator register</code></p></li></ol><h3 id="9.-Coordinating-with-Julia-Ecosystem" tabindex="-1">9. Coordinating with Julia Ecosystem <a class="header-anchor" href="#9.-Coordinating-with-Julia-Ecosystem" aria-label="Permalink to &quot;9. Coordinating with Julia Ecosystem {#9.-Coordinating-with-Julia-Ecosystem}&quot;">​</a></h3><h4 id="Registry-Compatibility" tabindex="-1">Registry Compatibility <a class="header-anchor" href="#Registry-Compatibility" aria-label="Permalink to &quot;Registry Compatibility {#Registry-Compatibility}&quot;">​</a></h4><ul><li><p>Monitor Julia ecosystem releases affecting dependencies</p></li><li><p>Test against Julia LTS, stable, and pre-release versions in CI</p></li><li><p>Follow Julia deprecation cycles</p></li></ul><h4 id="Documentation-Releases" tabindex="-1">Documentation Releases <a class="header-anchor" href="#Documentation-Releases" aria-label="Permalink to &quot;Documentation Releases {#Documentation-Releases}&quot;">​</a></h4><ul><li><p>Major releases trigger documentation rebuilds automatically</p></li><li><p>Ensure tutorials work with new versions</p></li><li><p>Update installation instructions if Julia version requirements change</p></li></ul><h3 id="10.-Troubleshooting-Releases" tabindex="-1">10. Troubleshooting Releases <a class="header-anchor" href="#10.-Troubleshooting-Releases" aria-label="Permalink to &quot;10. Troubleshooting Releases {#10.-Troubleshooting-Releases}&quot;">​</a></h3><h4 id="Common-Issues:" tabindex="-1">Common Issues: <a class="header-anchor" href="#Common-Issues:" aria-label="Permalink to &quot;Common Issues: {#Common-Issues:}&quot;">​</a></h4><ul><li><p><strong>Registry PR fails</strong>: Check Project.toml syntax and version conflicts</p></li><li><p><strong>TagBot doesn&#39;t trigger</strong>: Verify <code>DOCUMENTER_KEY</code> secret is configured</p></li><li><p><strong>Tests fail after release</strong>: Emergency patch release procedure</p></li></ul><h4 id="Getting-Help:" tabindex="-1">Getting Help: <a class="header-anchor" href="#Getting-Help:" aria-label="Permalink to &quot;Getting Help: {#Getting-Help:}&quot;">​</a></h4><ul><li><p>Check <a href="https://discourse.julialang.org/" target="_blank" rel="noreferrer">Julia Discourse</a> for registry issues</p></li><li><p>SciML community practices for guidance</p></li><li><p>GitHub Issues for package-specific problems</p></li></ul><hr><p>This process ensures reliable, frequent releases while maintaining high quality and ecosystem compatibility.</p>`,78)])])}const u=a(l,[["render",o]]);export{h as __pageData,u as default};
